on:
  workflow_dispatch

name: Release

jobs:
  changelog:
    permissions:
      contents: write
    name: Generate Changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Generate changelog
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        with:
          args: -vv --latest --strip header
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.git-cliff.outputs.content }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  publish:
    permissions:
      contents: write
    name: ${{ matrix.name }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - i686-unknown-linux-musl

        include:

          - os: ubuntu-latest
            name: Linux musl x86_64
            target: i686-unknown-linux-musl
            artifact_name: target/i686-unknown-linux-musl/release/pfetch
            release_name: pfetch-i686-unknown-linux-musl.tar.gz
            cross: true
            strip: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Bootstrap
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target=${{ matrix.target }} --release
          use-cross: ${{ matrix.cross }}

      - name: Compress binaries
        run: if [ "$RUNNER_OS" != "Windows" ]; then
            tar cfzv ${{ matrix.release_name }} -C "$(dirname ${{ matrix.artifact_name}})" "$(basename ${{ matrix.artifact_name }})";
          else
            mv ${{ matrix.artifact_name }} ${{ matrix.release_name }};
          fi
        shell: bash
      
      - name: Tag the repository
        id: tag
        run: |
         # See https://docs.github.com/en/get-started/using-git/dealing-with-special-characters-in-branch-and-tag-names
         git config --global user.email "hmd818121@gmail.com"
         git config --global user.name "x7md"
         TAG=v$(date -Iseconds | sed 's/[T:\+]/-/g')
         echo "$TAG"
         echo "tag=$TAG" >> $GITHUB_OUTPUT
         git tag -a $TAG -m "Published version $TAG" ${GITHUB_SHA}
         git push origin $TAG
      
      - name: Upload binaries
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.release_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

